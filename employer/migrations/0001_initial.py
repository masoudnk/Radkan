# Generated by Django 5.0.2 on 2025-01-11 07:53

import django.core.validators
import django.db.models.deletion
import django_jalali.db.models
import employer.models
import employer.utilities
import mptt.fields
import phonenumber_field.modelfields
import re
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(max_length=255, verbose_name='نام کاربری')),
                ('mobile', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, unique=True, verbose_name='شماره همراه')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('registration_date', django_jalali.db.models.jDateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AttendanceDeviceBrand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='LegalEntityType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='TicketSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='Workplace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('city', models.CharField(max_length=250)),
                ('address', models.TextField(blank=True, null=True)),
                ('radius', models.PositiveSmallIntegerField(default=50, verbose_name='شعاع(متر)')),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='عرض جغرافیایی')),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='طول جغرافیایی')),
            ],
        ),
        migrations.CreateModel(
            name='WorkPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='WorkShift',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('maximum_shiftless_day_overtime', models.PositiveSmallIntegerField(help_text='minutes')),
                ('observance_of_public_holidays', models.BooleanField(default=False)),
                ('year', models.PositiveSmallIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('employer_id', models.PositiveIntegerField()),
                ('first_name', models.CharField(max_length=255, verbose_name='نام')),
                ('last_name', models.CharField(max_length=255, verbose_name='نام خانوادگی')),
                ('national_code', models.CharField(blank=True, max_length=250, null=True, validators=[employer.utilities.national_code_validation], verbose_name='کد ملی')),
                ('personnel_code', models.CharField(max_length=250)),
                ('shift_start_date', django_jalali.db.models.jDateField()),
                ('shift_end_date', django_jalali.db.models.jDateField()),
                ('front_image', models.ImageField(upload_to=employer.models.get_file_path)),
                ('up_image', models.ImageField(upload_to=employer.models.get_file_path)),
                ('down_image', models.ImageField(upload_to=employer.models.get_file_path)),
                ('left_image', models.ImageField(upload_to=employer.models.get_file_path)),
                ('right_image', models.ImageField(upload_to=employer.models.get_file_path)),
                ('front_second_image', models.ImageField(upload_to=employer.models.get_file_path)),
                ('work_policy', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='employer.workpolicy')),
                ('work_shift', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='employer.workshift')),
                ('workplace', models.ManyToManyField(to='employer.workplace')),
            ],
            options={
                'abstract': False,
            },
            bases=('employer.user',),
        ),
        migrations.CreateModel(
            name='Employer',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('accepted_rules', models.BooleanField(default=False)),
                ('national_code', models.CharField(blank=True, max_length=250, null=True, validators=[employer.utilities.national_code_validation])),
                ('is_male', models.BooleanField(choices=[(True, 'آقا'), (False, 'خانم')], default=True, verbose_name='جنسیت')),
                ('personality', models.PositiveSmallIntegerField(choices=[(1, 'حقیقی'), (2, 'حقوقی')], default='حقیقی', verbose_name='نوع کاربری')),
                ('birth_date', django_jalali.db.models.jDateField(blank=True, null=True, verbose_name='تاریخ تولد')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, verbose_name='تلفن')),
                ('postal_code', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:\\d+)*\\Z'), code='invalid', message=None), django.core.validators.MinLengthValidator(10)])),
                ('address', models.TextField(blank=True, null=True, verbose_name='آدرس')),
                ('company_name', models.CharField(blank=True, max_length=250, null=True)),
                ('company_registration_date', django_jalali.db.models.jDateField(blank=True, null=True)),
                ('company_registration_number', models.PositiveIntegerField(blank=True, null=True)),
                ('company_national_id', models.PositiveIntegerField(blank=True, null=True)),
                ('branch_name', models.CharField(blank=True, max_length=250, null=True)),
                ('economical_code', models.PositiveIntegerField(blank=True, null=True)),
                ('email_login_successful', models.BooleanField(default=False)),
                ('email_login_failed', models.BooleanField(default=True)),
                ('email_change_password', models.BooleanField(default=True)),
                ('email_employee_login', models.BooleanField(default=False)),
                ('email_employee_logout', models.BooleanField(default=False)),
                ('legal_entity_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='employer.legalentitytype')),
                ('referrer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='employer.employer')),
            ],
            options={
                'abstract': False,
            },
            bases=('employer.user',),
        ),
        migrations.CreateModel(
            name='Manager',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('employer_id', models.PositiveIntegerField()),
                ('expiration_date', django_jalali.db.models.jDateTimeField()),
            ],
            options={
                'permissions': (('view_report', 'Can view report'),),
            },
            bases=('employer.user',),
        ),
        migrations.CreateModel(
            name='AttendanceDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('port', models.PositiveSmallIntegerField(default=4730)),
                ('ip_address', models.GenericIPAddressField()),
                ('is_online', models.BooleanField(blank=True, choices=[(True, 'آنلاین'), (False, 'آفلاین')], default='آنلاین', null=True, verbose_name='وضعیت دستگاه')),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='employer.attendancedevicebrand')),
            ],
        ),
        migrations.CreateModel(
            name='ResetPasswordRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.PositiveSmallIntegerField(default=employer.utilities.get_random_int_code)),
                ('active', models.BooleanField(default=True)),
                ('request_date', django_jalali.db.models.jDateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('active', models.BooleanField(default=True)),
                ('date_time', django_jalali.db.models.jDateTimeField(auto_now_add=True)),
                ('description', models.TextField()),
                ('attachment', models.FileField(blank=True, max_length=200, null=True, upload_to=employer.models.get_file_path)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='employer.ticketsection')),
            ],
        ),
        migrations.CreateModel(
            name='TicketConversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', django_jalali.db.models.jDateTimeField(auto_now_add=True)),
                ('description', models.TextField()),
                ('attachment', models.FileField(blank=True, max_length=200, null=True, upload_to=employer.models.get_file_path)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='employer.ticket')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WorkCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='children', to='employer.workcategory')),
                ('employee', models.ManyToManyField(to='employer.employee')),
                ('employer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='employer.employer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RadkanMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('description', models.TextField()),
                ('date', django_jalali.db.models.jDateField(auto_now_add=True)),
                ('work_category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='employer.workcategory')),
                ('employees', models.ManyToManyField(to='employer.employee')),
                ('employer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='employer.employer')),
            ],
        ),
        migrations.CreateModel(
            name='RollCall',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', django_jalali.db.models.jDateField()),
                ('arrival', models.TimeField(auto_now_add=True)),
                ('departure', models.TimeField(blank=True, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='عرض جغرافیایی')),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='طول جغرافیایی')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='employer.employee')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('status', models.BooleanField()),
                ('employee', models.ManyToManyField(to='employer.employee')),
                ('employer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='employer.employer')),
            ],
        ),
        migrations.CreateModel(
            name='WorkShiftPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', django_jalali.db.models.jDateField()),
                ('plan_type', models.PositiveSmallIntegerField(choices=[(1, 'ساده'), (2, 'شناور')], default='ساده')),
                ('daily_duty_duration', models.PositiveSmallIntegerField(blank=True, help_text='minutes', null=True)),
                ('floating_time', models.PositiveSmallIntegerField(blank=True, help_text='minutes', null=True)),
                ('daily_overtime_limit', models.PositiveSmallIntegerField()),
                ('beginning_overtime', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('middle_overtime', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ending_overtime', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('permitted_delay', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('permitted_acceleration', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('pre_shift_floating', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('permitted_traffic_start', models.TimeField(blank=True, null=True)),
                ('permitted_traffic_end', models.TimeField(blank=True, null=True)),
                ('is_night_shift', models.BooleanField(default=False)),
                ('reset_time', models.TimeField(blank=True, null=True)),
                ('first_period_start', models.TimeField(blank=True, null=True)),
                ('first_period_end', models.TimeField(blank=True, null=True)),
                ('second_period_start', models.TimeField(blank=True, null=True)),
                ('second_period_end', models.TimeField(blank=True, null=True)),
                ('work_shift', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='employer.workshift')),
                ('employer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='employer.employer')),
            ],
        ),
        migrations.AddField(
            model_name='workshift',
            name='employer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='employer.employer'),
        ),
        migrations.AddField(
            model_name='workpolicy',
            name='employer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='employer.employer'),
        ),
        migrations.AddField(
            model_name='workplace',
            name='employer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='employer.employer'),
        ),
        migrations.CreateModel(
            name='WorkMissionPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maximum_hour_per_year', models.PositiveSmallIntegerField(help_text='minutes')),
                ('maximum_minute_per_year', models.PositiveSmallIntegerField(help_text='minutes', validators=[django.core.validators.MaxValueValidator(59)])),
                ('maximum_hour_per_month', models.PositiveSmallIntegerField(help_text='minutes')),
                ('maximum_minute_per_month', models.PositiveSmallIntegerField(help_text='minutes', validators=[django.core.validators.MaxValueValidator(59)])),
                ('maximum_daily_request_per_year', models.PositiveSmallIntegerField()),
                ('maximum_daily_request_per_month', models.PositiveSmallIntegerField()),
                ('maximum_hourly_request_per_year', models.PositiveSmallIntegerField()),
                ('maximum_hourly_request_per_month', models.PositiveSmallIntegerField()),
                ('acceptable_daily_registration_type', models.PositiveSmallIntegerField(choices=[(1, 'قبل'), (2, 'بعد')])),
                ('acceptable_daily_registration_days', models.PositiveSmallIntegerField()),
                ('acceptable_hourly_registration_type', models.PositiveSmallIntegerField(choices=[(1, 'قبل'), (2, 'بعد')])),
                ('acceptable_hourly_registration_days', models.PositiveSmallIntegerField()),
                ('work_policy', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='employer.workpolicy')),
                ('employer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='employer.employer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SickLeavePolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maximum_hour_per_year', models.PositiveSmallIntegerField(help_text='minutes')),
                ('maximum_minute_per_year', models.PositiveSmallIntegerField(help_text='minutes', validators=[django.core.validators.MaxValueValidator(59)])),
                ('maximum_hour_per_month', models.PositiveSmallIntegerField(help_text='minutes')),
                ('maximum_minute_per_month', models.PositiveSmallIntegerField(help_text='minutes', validators=[django.core.validators.MaxValueValidator(59)])),
                ('maximum_daily_request_per_year', models.PositiveSmallIntegerField()),
                ('maximum_daily_request_per_month', models.PositiveSmallIntegerField()),
                ('maximum_hourly_request_per_year', models.PositiveSmallIntegerField()),
                ('maximum_hourly_request_per_month', models.PositiveSmallIntegerField()),
                ('acceptable_daily_registration_type', models.PositiveSmallIntegerField(choices=[(1, 'قبل'), (2, 'بعد')])),
                ('acceptable_daily_registration_days', models.PositiveSmallIntegerField()),
                ('acceptable_hourly_registration_type', models.PositiveSmallIntegerField(choices=[(1, 'قبل'), (2, 'بعد')])),
                ('acceptable_hourly_registration_days', models.PositiveSmallIntegerField()),
                ('work_policy', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='employer.workpolicy')),
                ('employer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='employer.employer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RTSP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rtsp_link', models.TextField()),
                ('traffic_type', models.PositiveSmallIntegerField(choices=[(1, 'ورود'), (2, 'خروج')])),
                ('workplace', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='employer.workplace')),
                ('employer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='employer.employer')),
            ],
        ),
        migrations.CreateModel(
            name='OvertimePolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maximum_hour_per_year', models.PositiveSmallIntegerField(help_text='minutes')),
                ('maximum_minute_per_year', models.PositiveSmallIntegerField(help_text='minutes', validators=[django.core.validators.MaxValueValidator(59)])),
                ('maximum_hour_per_month', models.PositiveSmallIntegerField(help_text='minutes')),
                ('maximum_minute_per_month', models.PositiveSmallIntegerField(help_text='minutes', validators=[django.core.validators.MaxValueValidator(59)])),
                ('maximum_daily_request_per_year', models.PositiveSmallIntegerField()),
                ('maximum_daily_request_per_month', models.PositiveSmallIntegerField()),
                ('acceptable_registration_days', models.PositiveSmallIntegerField()),
                ('work_policy', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='employer.workpolicy')),
                ('employer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='employer.employer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MelliSMSInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('melli_sms_username', models.CharField(max_length=250)),
                ('melli_sms_password', models.CharField(max_length=250)),
                ('melli_sms_phone_number', models.CharField(max_length=250)),
                ('sms_email_register_employee_request', models.BooleanField(default=False)),
                ('sms_login_successful', models.BooleanField(default=False)),
                ('sms_login_failed', models.BooleanField(default=False)),
                ('sms_change_password', models.BooleanField(default=False)),
                ('sms_employee_login', models.BooleanField(default=True)),
                ('sms_employee_logout', models.BooleanField(default=True)),
                ('sms_register_employee_request', models.BooleanField(default=True)),
                ('employer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='employer.employer')),
            ],
        ),
        migrations.CreateModel(
            name='ManualTrafficPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maximum_per_year', models.PositiveSmallIntegerField()),
                ('maximum_per_month', models.PositiveSmallIntegerField()),
                ('acceptable_registration_days', models.PositiveSmallIntegerField()),
                ('work_policy', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='employer.workpolicy')),
                ('employer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='employer.employer')),
            ],
        ),
        migrations.CreateModel(
            name='Holiday',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('date', django_jalali.db.models.jDateField()),
                ('employer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='employer.employer')),
            ],
        ),
        migrations.CreateModel(
            name='EmployeeRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.PositiveSmallIntegerField(choices=[(1, 'تردد دستی'), (2, 'مرخصی استحقاقی ساعتی'), (3, 'مرخصی استحقاقی روزانه'), (4, 'ماموریت ساعتی'), (5, 'ماموریت روزانه'), (6, 'اضافه کار'), (7, 'استعلاجی ساعتی'), (8, 'استعلاجی روزانه'), (9, 'مرخصی بی حقوق ساعتی'), (10, 'مرخصی بی حقوق روزانه'), (11, 'تردد دستی پروژه'), (12, 'جابجایی شیفت')])),
                ('end_date', django_jalali.db.models.jDateField(blank=True, null=True)),
                ('registration_date', django_jalali.db.models.jDateField(auto_now_add=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'در دست بررسی'), (2, 'تایید شده'), (3, 'رد شده')], default='در دست بررسی')),
                ('description', models.TextField(blank=True, null=True)),
                ('date', django_jalali.db.models.jDateField(blank=True, null=True)),
                ('time', models.TimeField(blank=True, null=True)),
                ('manual_traffic_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'ورود'), (2, 'خروج')], null=True)),
                ('to_time', models.TimeField(blank=True, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='عرض جغرافیایی')),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='طول جغرافیایی')),
                ('attachment', models.FileField(blank=True, max_length=200, null=True, upload_to=employer.models.get_file_path)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='employer.project')),
                ('workplace', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='employer.workplace')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='employer.employee')),
                ('other_employee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='other_employee', to='employer.employee')),
                ('employer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='employer.employer')),
            ],
        ),
        migrations.CreateModel(
            name='EarnedLeavePolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maximum_hour_per_year', models.PositiveSmallIntegerField(help_text='minutes')),
                ('maximum_minute_per_year', models.PositiveSmallIntegerField(help_text='minutes', validators=[django.core.validators.MaxValueValidator(59)])),
                ('maximum_hour_per_month', models.PositiveSmallIntegerField(help_text='minutes')),
                ('maximum_minute_per_month', models.PositiveSmallIntegerField(help_text='minutes', validators=[django.core.validators.MaxValueValidator(59)])),
                ('maximum_daily_request_per_year', models.PositiveSmallIntegerField()),
                ('maximum_daily_request_per_month', models.PositiveSmallIntegerField()),
                ('maximum_hourly_request_per_year', models.PositiveSmallIntegerField()),
                ('maximum_hourly_request_per_month', models.PositiveSmallIntegerField()),
                ('acceptable_daily_registration_type', models.PositiveSmallIntegerField(choices=[(1, 'قبل'), (2, 'بعد')])),
                ('acceptable_daily_registration_days', models.PositiveSmallIntegerField()),
                ('acceptable_hourly_registration_type', models.PositiveSmallIntegerField(choices=[(1, 'قبل'), (2, 'بعد')])),
                ('acceptable_hourly_registration_days', models.PositiveSmallIntegerField()),
                ('year', models.PositiveSmallIntegerField()),
                ('maximum_earned_leave_for_next_year_hour', models.PositiveSmallIntegerField(help_text='hour')),
                ('maximum_earned_leave_for_next_year_minutes', models.PositiveSmallIntegerField(help_text='minutes', validators=[django.core.validators.MaxValueValidator(59)])),
                ('work_policy', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='employer.workpolicy')),
                ('employer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='employer.employer')),
            ],
            options={
                'permissions': [('update', 'update EarnedLeavePolicy')],
            },
        ),
        migrations.CreateModel(
            name='RadkanMessageViewInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', django_jalali.db.models.jDateTimeField(auto_now_add=True)),
                ('radkan_message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='employer.radkanmessage')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='employer.employee')),
            ],
            options={
                'unique_together': {('radkan_message', 'employee')},
            },
        ),
    ]
